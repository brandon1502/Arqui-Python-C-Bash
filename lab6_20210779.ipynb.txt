{"cells":[{"cell_type":"markdown","metadata":{"id":"jWLG-fQQyBHr"},"source":["# Laboratorio 6\n","\n","* Asuma que las operaciones requieren alta precisión.\n","* Presente su solución con el nombre `lab6_codigoPUCP.ipynb`"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"LBNjsAAOZIS_"},"outputs":[],"source":["import numpy\n","ns = 2**numpy.arange(5,15)"]},{"cell_type":"markdown","metadata":{"id":"_VA_viGEumDS"},"source":["a) Implementar (en un único archivo) cuatro funciones en C que acumulen los elementos de una matriz cuadrada de números reales. Solo puede emplear un único bucle `for`. En la primera función realizar la acumulación elemento a elemento, en la segunda acumule en bloques de 2 elementos, en la tercera acumule en bloques de 4 elementos, y en la cuarta acumule en bloques de 8 elementos. (2.0 ptos)"]},{"cell_type":"code","execution_count":12,"metadata":{},"outputs":[{"name":"stdout","output_type":"stream","text":["Overwriting matriz_cuadrada.c\n"]}],"source":["%%file matriz_cuadrada.c\n","#include <stdio.h>\n","#include <stdlib.h>\n","\n","void matriz_cuadrada1(int *m, int N){ \n","    int j=0;\n","                                                    \n","    for (unsigned long long i = 0;i<N;i++)\n","    {\n","        j =j+ m[i];\n","    }\n","    \n","}\n","\n","void matriz_cuadrada2(int *m,  int N){\n","    int j=0;\n","    for (unsigned long long i = 0;i<N;i=i+2)\n","    {\n","        j = j+ m[i]+ m[i+1];\n","    }\n","}\n","void matriz_cuadrada4(int *m,  int N){\n","    int j=0;\n","    for (unsigned long long i = 0;i<N;i=i+3)\n","    {\n","        j = j+ m[i]+ m[i+1]+ m[i+2];\n","    }\n","    \n","}\n","void matriz_cuadrada8(int *m,  int N){\n","    int j=0;\n","    for (unsigned long long i = 0;i<N;i=i+4)\n","    {\n","        j = j + m[i] + m[i+1]+ + m[i+2]+ + m[i+3];\n","    }\n","}\n"]},{"cell_type":"markdown","metadata":{"id":"whVfWflcu-bG"},"source":["b) Coloque el comando para generar la librería dinámica del ítem (a) y genere la librería dinámica. (0.25 ptos)"]},{"cell_type":"code","execution_count":13,"metadata":{},"outputs":[],"source":["! gcc -c matriz_cuadrada.c -lm"]},{"cell_type":"code","execution_count":14,"metadata":{},"outputs":[],"source":["! gcc -shared matriz_cuadrada.o -o matriz_cuadrada.so"]},{"cell_type":"markdown","metadata":{"id":"JrLT7QZMvPjV"},"source":["c) Implemente una función que vincule la librería dinámica generada en el ítem (b) con Python usando `ctypes`. La función no recibe argumentos y debe devolver las cuatro funciones configuradas listas para su uso. (0.5 ptos)"]},{"cell_type":"code","execution_count":15,"metadata":{},"outputs":[],"source":["import ctypes\n","import numpy as np\n","\n","def ctypes_matriz_cuadrada():\n","    \n","    lib = ctypes.CDLL(\"./matriz_cuadrada.so\")\n","    lib.matriz_cuadrada1.argtypes = [np.ctypeslib.ndpointer(dtype=np.int32), ctypes.c_int] \n","    lib.matriz_cuadrada1.restype = ctypes.c_int \n","\n","    lib.matriz_cuadrada2.argtypes = [np.ctypeslib.ndpointer(dtype=np.int32), ctypes.c_int]\n","    lib.matriz_cuadrada2.restype = ctypes.c_int\n","\n","    lib.matriz_cuadrada4.argtypes = [np.ctypeslib.ndpointer(dtype=np.int32), ctypes.c_int] \n","    lib.matriz_cuadrada4.restype = ctypes.c_int\n","\n","    lib.matriz_cuadrada8.argtypes = [np.ctypeslib.ndpointer(dtype=np.int32), ctypes.c_int]\n","    lib.matriz_cuadrada8.restype = ctypes.c_int\n","    \n","    return lib.matriz_cuadrada1, lib.matriz_cuadrada2, lib.matriz_cuadrada4, lib.matriz_cuadrada8"]},{"cell_type":"markdown","metadata":{"id":"17rEz9ecviJF"},"source":["d) Haga una instancia de las cuatro funciones a partir de su función en el ítem (c) (0.25 ptos)"]},{"cell_type":"code","execution_count":16,"metadata":{},"outputs":[],"source":["c_matriz_cuadrada1, c_matriz_cuadrada2, c_matriz_cuadrada4, c_matriz_cuadrada8 = ctypes_matriz_cuadrada()\n"]},{"cell_type":"markdown","metadata":{"id":"HWb7efnuvr0d"},"source":["e) Pruebe todas sus funciones obtenidas en el ítem (d) para el menor de los valores de `ns` y la variable `Y`, y muestre que dan el mismo resultado. (0.25 ptos)"]},{"cell_type":"code","execution_count":18,"metadata":{"id":"j9bn_AF-hJ6v"},"outputs":[{"ename":"NameError","evalue":"name 'ns' is not defined","output_type":"error","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)","Cell \u001b[0;32mIn[18], line 1\u001b[0m\n\u001b[0;32m----> 1\u001b[0m n \u001b[39m=\u001b[39m ns[\u001b[39m0\u001b[39m]\n\u001b[1;32m      2\u001b[0m A \u001b[39m=\u001b[39m numpy\u001b[39m.\u001b[39mrandom\u001b[39m.\u001b[39mrand(n,n)\n\u001b[1;32m      3\u001b[0m Y \u001b[39m=\u001b[39m A\u001b[39m.\u001b[39mflatten()\n","\u001b[0;31mNameError\u001b[0m: name 'ns' is not defined"]}],"source":["n = ns[0]\n","A = numpy.random.rand(n,n)\n","Y = A.flatten()\n","\n","print(c_matriz_cuadrada1[0], (Y, len(Y)))\n","print(c_matriz_cuadrada2[0], (Y, len(Y)))\n","print(c_matriz_cuadrada4[0], (Y, len(Y)))\n","print(c_matriz_cuadrada8[0], (Y, len(Y)))\n","\n","print(c_matriz_cuadrada1[1], (Y, len(Y)))\n","print(c_matriz_cuadrada2[1], (Y, len(Y)))\n","print(c_matriz_cuadrada4[1], (Y, len(Y)))\n","print(c_matriz_cuadrada8[1], (Y, len(Y)))\n","\n","print(c_matriz_cuadrada1[2], (Y, len(Y)))\n","print(c_matriz_cuadrada2[2], (Y, len(Y)))\n","print(c_matriz_cuadrada4[2], (Y, len(Y)))\n","print(c_matriz_cuadrada8[2], (Y, len(Y)))\n","\n","print(c_matriz_cuadrada1[3], (Y, len(Y)))\n","print(c_matriz_cuadrada2[3], (Y, len(Y)))\n","print(c_matriz_cuadrada4[3], (Y, len(Y)))\n","print(c_matriz_cuadrada8[3], (Y, len(Y)))\n","\n"]},{"cell_type":"markdown","metadata":{"id":"qIbQWXiXvyvI"},"source":["f) Pruebe todas sus funciones obtenidas en el ítem (d) para el mayor de los valores de `ns` y la variable `Y`, y muestre que dan el mismo resultado. (0.25 ptos)"]},{"cell_type":"code","execution_count":19,"metadata":{"id":"bsEI6zaqhcF9"},"outputs":[{"ename":"NameError","evalue":"name 'ns' is not defined","output_type":"error","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)","Cell \u001b[0;32mIn[19], line 1\u001b[0m\n\u001b[0;32m----> 1\u001b[0m n \u001b[39m=\u001b[39m ns[\u001b[39m-\u001b[39m\u001b[39m1\u001b[39m]\n\u001b[1;32m      2\u001b[0m A \u001b[39m=\u001b[39m numpy\u001b[39m.\u001b[39mrandom\u001b[39m.\u001b[39mrand(n,n)\n\u001b[1;32m      3\u001b[0m Y \u001b[39m=\u001b[39m A\u001b[39m.\u001b[39mflatten()\n","\u001b[0;31mNameError\u001b[0m: name 'ns' is not defined"]}],"source":["n = ns[-1]\n","A = numpy.random.rand(n,n)\n","Y = A.flatten()\n","\n","print(c_matriz_cuadrada1[0], (Y, len(Y)))\n","print(c_matriz_cuadrada2[0], (Y, len(Y)))\n","print(c_matriz_cuadrada4[0], (Y, len(Y)))\n","print(c_matriz_cuadrada8[0], (Y, len(Y)))\n","\n","print(c_matriz_cuadrada1[1], (Y, len(Y)))\n","print(c_matriz_cuadrada2[1], (Y, len(Y)))\n","print(c_matriz_cuadrada4[1], (Y, len(Y)))\n","print(c_matriz_cuadrada8[1], (Y, len(Y)))\n","\n","print(c_matriz_cuadrada1[2], (Y, len(Y)))\n","print(c_matriz_cuadrada2[2], (Y, len(Y)))\n","print(c_matriz_cuadrada4[2], (Y, len(Y)))\n","print(c_matriz_cuadrada8[2], (Y, len(Y)))\n","\n","print(c_matriz_cuadrada1[3], (Y, len(Y)))\n","print(c_matriz_cuadrada2[3], (Y, len(Y)))\n","print(c_matriz_cuadrada4[3], (Y, len(Y)))\n","print(c_matriz_cuadrada8[3], (Y, len(Y)))\n"]},{"cell_type":"markdown","metadata":{"id":"1ITU2_n7xVFz"},"source":["g) Realice 50 mediciones de tiempo para todas sus funciones, y para todos los valores de `ns`. El valor representativo de las 50 mediciones será la mediana. (0.5 ptos)"]},{"cell_type":"code","execution_count":21,"metadata":{},"outputs":[{"ename":"TypeError","evalue":"'_FuncPtr' object is not subscriptable","output_type":"error","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mTypeError\u001b[0m                                 Traceback (most recent call last)","Cell \u001b[0;32mIn[21], line 11\u001b[0m\n\u001b[1;32m      9\u001b[0m \u001b[39mfor\u001b[39;00m _ \u001b[39min\u001b[39;00m \u001b[39mrange\u001b[39m (\u001b[39miter\u001b[39m):\n\u001b[1;32m     10\u001b[0m     t1\u001b[39m=\u001b[39mtime\u001b[39m.\u001b[39mperf_counter()\n\u001b[0;32m---> 11\u001b[0m     c_matriz_cuadrada1[\u001b[39m0\u001b[39;49m], (Y, \u001b[39mlen\u001b[39m(Y))\n\u001b[1;32m     12\u001b[0m     t2\u001b[39m=\u001b[39mtime\u001b[39m.\u001b[39mperf_counter()\n\u001b[1;32m     14\u001b[0m     lista_tiempo_c0\u001b[39m.\u001b[39mappend(\u001b[39m1e6\u001b[39m\u001b[39m*\u001b[39m(t2\u001b[39m-\u001b[39mt1))\n","\u001b[0;31mTypeError\u001b[0m: '_FuncPtr' object is not subscriptable"]}],"source":["import time\n","\n","lista_tiempo_c0=[]\n","lista_tiempo_c2=[]\n","lista_tiempo_c4=[]\n","lista_tiempo_c8=[]\n","\n","iter=50\n","for _ in range (iter):\n","    t1=time.perf_counter()\n","    c_matriz_cuadrada1[0], (Y, len(Y))\n","    t2=time.perf_counter()\n","\n","    lista_tiempo_c0.append(1e6*(t2-t1))\n","    \n","    t1=time.perf_counter()\n","    c_matriz_cuadrada2[0], (Y, len(Y))\n","    t2=time.perf_counter()\n","    \n","    lista_tiempo_c2.append(1e6*(t2-t1))\n","    \n","    t1=time.perf_counter()\n","    c_matriz_cuadrada4[0], (Y, len(Y))\n","    t2=time.perf_counter()\n","\n","    lista_tiempo_c4.append(1e6*(t2-t1))\n","    \n","    t1=time.perf_counter()\n","    c_matriz_cuadrada8[0], (Y, len(Y))\n","    t2=time.perf_counter()\n","    \n","    lista_tiempo_c8.append(1e6*(t2-t1))\n","    \n","    \n","    \n","    \n","    \n","    \n","    t1=time.perf_counter()\n","    c_matriz_cuadrada1[1], (Y, len(Y))\n","    t2=time.perf_counter()\n","\n","    lista_tiempo_c0.append(1e6*(t2-t1))\n","    \n","    t1=time.perf_counter()\n","    c_matriz_cuadrada2[1], (Y, len(Y))\n","    t2=time.perf_counter()\n","    \n","    lista_tiempo_c2.append(1e6*(t2-t1))\n","    \n","    t1=time.perf_counter()\n","    c_matriz_cuadrada4[1], (Y, len(Y))\n","    t2=time.perf_counter()\n","\n","    lista_tiempo_c4.append(1e6*(t2-t1))\n","    \n","    t1=time.perf_counter()\n","    c_matriz_cuadrada8[1], (Y, len(Y))\n","    t2=time.perf_counter()\n","    \n","    lista_tiempo_c8.append(1e6*(t2-t1))\n","    \n","    \n","    \n","    \n","    \n","    \n","    t1=time.perf_counter()\n","    c_matriz_cuadrada1[2], (Y, len(Y))\n","    t2=time.perf_counter()\n","\n","    lista_tiempo_c0.append(1e6*(t2-t1))\n","    \n","    t1=time.perf_counter()\n","    c_matriz_cuadrada2[2], (Y, len(Y))\n","    t2=time.perf_counter()\n","    \n","    lista_tiempo_c2.append(1e6*(t2-t1))\n","    \n","    t1=time.perf_counter()\n","    c_matriz_cuadrada4[2], (Y, len(Y))\n","    t2=time.perf_counter()\n","\n","    lista_tiempo_c4.append(1e6*(t2-t1))\n","    \n","    t1=time.perf_counter()\n","    c_matriz_cuadrada8[2], (Y, len(Y))\n","    t2=time.perf_counter()\n","    \n","    lista_tiempo_c8.append(1e6*(t2-t1))\n","    \n","    \n","    \n","    \n","    \n","    \n","    t1=time.perf_counter()\n","    c_matriz_cuadrada1[3], (Y, len(Y))\n","    t2=time.perf_counter()\n","\n","    lista_tiempo_c0.append(1e6*(t2-t1))\n","    \n","    t1=time.perf_counter()\n","    c_matriz_cuadrada2[3], (Y, len(Y))\n","    t2=time.perf_counter()\n","    \n","    lista_tiempo_c2.append(1e6*(t2-t1))\n","    \n","    t1=time.perf_counter()\n","    c_matriz_cuadrada4[3], (Y, len(Y))\n","    t2=time.perf_counter()\n","\n","    lista_tiempo_c4.append(1e6*(t2-t1))\n","    \n","    t1=time.perf_counter()\n","    c_matriz_cuadrada8[3], (Y, len(Y))\n","    t2=time.perf_counter()\n","    \n","    lista_tiempo_c8.append(1e6*(t2-t1))\n","       "]},{"cell_type":"markdown","metadata":{"id":"OKyVpGgGxgKr"},"source":["h) Presente una gráfica en la que muestre como varía el tiempo de ejecución respecto del valor de `ns`. Solo para los cinco primeros valores de `ns`. (0.25 ptos)"]},{"cell_type":"code","execution_count":null,"metadata":{},"outputs":[],"source":["import matplotlib.pyplot as plt\n","import statistics\n","\n","plt.plot(range(iter), lista_tiempo_c0, label='Matriz cuadrada de 1 en C')\n","plt.plot(range(iter), lista_tiempo_c2, label='Matriz cuadrada de 2 en C')\n","plt.plot(range(iter), lista_tiempo_c4, label='Matriz cuadrada de 4 en C')\n","plt.plot(range(iter), lista_tiempo_c8, label='Matriz cuadrada de 8 en C')\n","\n","plt.plot(range(iter), [statistics.median(lista_tiempo_c0)]*len(lista_tiempo_c0), label='media de C')\n","plt.plot(range(iter), [statistics.median(lista_tiempo_c2)]*len(lista_tiempo_c0), label='media de C')\n","plt.plot(range(iter), [statistics.median(lista_tiempo_c4)]*len(lista_tiempo_c0), label='media de C')\n","plt.plot(range(iter), [statistics.median(lista_tiempo_c8)]*len(lista_tiempo_c0), label='media de C')\n","\n","plt.legend()\n","plt.grid(True)\n","plt.tight_layout()"]},{"cell_type":"markdown","metadata":{"id":"U5Qxi8Czxurq"},"source":["i) Presente una gráfica en la que muestre como varía el tiempo de ejecución respecto del valor de `ns`. Solo para los cinco últimos valores de `ns`. (0.25 ptos)"]},{"cell_type":"code","execution_count":null,"metadata":{},"outputs":[],"source":[]},{"cell_type":"markdown","metadata":{"id":"OVk0y5Zlx1M2"},"source":["j) Presente una gráfica en la que muestre como varía el *speedup* respecto del valor de `ns`. Solo para los cinco primeros valores de `ns`. Considere como referencia a la función más lenta. (0.25 ptos)"]},{"cell_type":"markdown","metadata":{"id":"aa8TFjo_x6e6"},"source":["k) Presente una gráfica en la que muestre como varía el *speedup* respecto del valor de `ns`. Solo para los cinco primeros valores de `ns`. Considere como referencia a la función más lenta. (0.25 ptos)"]},{"cell_type":"markdown","metadata":{"id":"tTFlDQORyJW7"},"source":["l) Implementar (en un único archivo) dos funciones en C que acumulen los elementos de una matriz cuadrada de números reales. Debe emplear dos bucle `for`. En la primera función realizar la acumulación leyendo los elementos por filas, en la segunda acumule leyendo los elementos por columnas. (1.5 ptos)"]},{"cell_type":"markdown","metadata":{"id":"PTLJgHUPydcA"},"source":["m) Coloque el comando para generar la librería dinámica del ítem (l) y genere la librería dinámica. (0.25 ptos)"]},{"cell_type":"markdown","metadata":{"id":"fnqAMj2Sy2ka"},"source":["n) Implemente una función que vincule la librería dinámica generada en el ítem (m) con Python usando `ctypes`. La función no recibe argumentos y debe devolver las dos funciones configuradas listas para su uso. (0.5 ptos)"]},{"cell_type":"markdown","metadata":{"id":"3v-x8pkOzHmF"},"source":["o) Haga una instancia de las dos funciones a partir de su función en el ítem (n) (0.25 ptos)"]},{"cell_type":"markdown","metadata":{"id":"bB-zkUuyz07k"},"source":["p) Pruebe todas sus funciones obtenidas en el ítem (o) para el menor de los valores de `ns` y muestre que dan el mismo resultado. (0.25 ptos)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"t5mT4e0DZKHv"},"outputs":[],"source":["n = ns[0]\n","A = numpy.random.rand(n,n)\n","Y = A.flatten()"]},{"cell_type":"markdown","metadata":{"id":"R-Pcb456z2sR"},"source":["q) Pruebe todas sus funciones obtenidas en el ítem (o) para el menor de los valores de `ns` y muestre que dan el mismo resultado. (0.25 ptos)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"WYUp6YCnb8JK"},"outputs":[],"source":["n = ns[-1]\n","A = numpy.random.rand(n,n)\n","Y = A.flatten()"]},{"cell_type":"markdown","metadata":{"id":"ai9lystGz8g1"},"source":["r) Realice 50 mediciones de tiempo para todas sus funciones obtenidas en el ítem (o), y para todos los valores de `ns`. El valor representativo de las 50 mediciones será la mediana. (0.5 ptos)"]},{"cell_type":"markdown","metadata":{"id":"86ZVce4EzW7p"},"source":["s) Presente una gráfica en la que muestre como varía el tiempo de ejecución de las instancias del ítem (o) respecto del valor de `ns`. Solo para los cinco primeros valores de `ns`. (0.25 ptos)"]},{"cell_type":"markdown","metadata":{"id":"3s9iF2TP0K_E"},"source":["t) Presente una gráfica en la que muestre como varía el tiempo de ejecución de las instancias del ítem (o) respecto del valor de `ns`. Solo para los cinco últimos valores de `ns`. (0.25 ptos)"]},{"cell_type":"markdown","metadata":{"id":"44yMSAUb0Qlh"},"source":["u) Presente una gráfica en la que muestre como varía el *speedup* de las instancias del ítem (o) respecto del valor de `ns`. Solo para los cinco primeros valores de `ns`. Considere como referencia la función más lenta. (0.25 ptos)"]},{"cell_type":"markdown","metadata":{"id":"8PBYa8Aq1viQ"},"source":["v) Compare graficamente las implementaciones de las versiones con un solo bucle `for`, con las implementaciones de las versiones con dos bucle `for`. Presente una gráfica de tiempo de ejecución para todos los tamaños, determine cual es la más rápida y cual es la más lenta. (0.5 ptos)"]},{"cell_type":"markdown","metadata":{"id":"RuGjVEcQwLOU"},"source":["w) En base al análisis del ítem (v), presente dos gráficas de *speedup* (de la función más rápida respecto de la más lenta). Una para los primeros cinco tamaños, y otra para los cinco últimos. (0.25 ptos)"]},{"cell_type":"markdown","metadata":{"id":"Oy4frmA72KMu"},"source":["x) Explique sus resultados de las implementaciones con un solo bucle `for` empleando conceptos de memoria caché. (2.0 ptos)"]},{"cell_type":"markdown","metadata":{"id":"UrzxQMmA3HHh"},"source":["y) Explique sus resultados de las implementaciones con dos bucle `for` empleando conceptos de memoria caché. (2.0 ptos)"]},{"cell_type":"markdown","metadata":{"id":"lG1izdfAq-SN"},"source":["z) ¿Qué implementación para sumar todos los elementos de una matriz es más eficiente en términos de tiempo de ejecución? ¿Por qué? Explique empleando conceptos de memoria caché. (1.0 pto)"]}],"metadata":{"colab":{"provenance":[]},"kernelspec":{"display_name":"Python 3","name":"python3"},"language_info":{"codemirror_mode":{"name":"ipython","version":3},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython3","version":"3.10.12"}},"nbformat":4,"nbformat_minor":0}
